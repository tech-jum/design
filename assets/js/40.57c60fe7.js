(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{437:function(a,t,r){"use strict";r.r(t);var s=r(15),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"rpc-基本原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rpc-基本原理"}},[a._v("#")]),a._v(" RPC 基本原理")]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E4%B8%80rpc-%E7%AE%80%E4%BB%8B"}},[a._v("一、RPC 简介")]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AF-rpc"}},[a._v("什么是 RPC")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#rpc-%E9%80%9A%E4%BF%A1"}},[a._v("RPC 通信")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#rpc-%E5%8D%8F%E8%AE%AE"}},[a._v("RPC 协议")])])])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E4%BA%8C%E5%BA%8F%E5%88%97%E5%8C%96"}},[a._v("二、序列化")]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E5%B8%B8%E8%A7%81%E5%BA%8F%E5%88%97%E5%8C%96%E6%96%B9%E5%BC%8F"}},[a._v("常见序列化方式")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98"}},[a._v("序列化问题")])])])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B8%89%E5%8F%8D%E5%B0%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86"}},[a._v("三、反射+动态代理")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E5%9B%9B%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1"}},[a._v("四、网络通信")]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#io-%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8"}},[a._v("IO 多路复用")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E9%9B%B6%E6%8B%B7%E8%B4%9D"}},[a._v("零拷贝")])])])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E4%BA%94rpc-%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%9E%8B"}},[a._v("五、RPC 架构模型")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E5%85%AD%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E5%92%8C%E5%8F%91%E7%8E%B0"}},[a._v("六、服务注册和发现")]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E5%9F%BA%E4%BA%8E-zookeeper-%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0"}},[a._v("基于 ZooKeeper 的服务发现")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E5%9F%BA%E4%BA%8E%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF%E7%9A%84%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7%E7%9A%84%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83"}},[a._v("基于消息总线的最终一致性的注册中心")])])])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B8%83%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5"}},[a._v("七、健康检查")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E5%85%AB%E8%B7%AF%E7%94%B1%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1"}},[a._v("八、路由和负载均衡")]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E8%B6%85%E6%97%B6%E9%87%8D%E8%AF%95"}},[a._v("超时重试")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E9%99%90%E6%B5%81%E9%99%8D%E7%BA%A7%E7%86%94%E6%96%AD"}},[a._v("限流、降级、熔断")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E4%BC%98%E9%9B%85%E5%90%AF%E5%8A%A8%E5%85%B3%E9%97%AD"}},[a._v("优雅启动关闭")])])])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B9%9D%E5%AE%B9%E9%94%99%E5%A4%84%E7%90%86"}},[a._v("九、容错处理")]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E5%BC%82%E5%B8%B8%E9%87%8D%E8%AF%95"}},[a._v("异常重试")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E9%87%8D%E8%AF%95%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4"}},[a._v("重试超时时间")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B8%9A%E5%8A%A1%E5%BC%82%E5%B8%B8"}},[a._v("业务异常")])])])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E5%8D%81%E4%BC%98%E9%9B%85%E4%B8%8A%E7%BA%BF%E4%B8%8B%E7%BA%BF"}},[a._v("十、优雅上线下线")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E5%8D%81%E4%B8%80%E9%99%90%E6%B5%81%E7%86%94%E6%96%AD"}},[a._v("十一、限流熔断")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E5%8D%81%E4%BA%8C%E4%B8%9A%E5%8A%A1%E5%88%86%E7%BB%84"}},[a._v("十二、业务分组")])]),a._v(" "),r("li",[r("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"}},[a._v("参考资料")])])]),a._v(" "),r("h2",{attrs:{id:"一、rpc-简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、rpc-简介"}},[a._v("#")]),a._v(" 一、RPC 简介")]),a._v(" "),r("h3",{attrs:{id:"什么是-rpc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是-rpc"}},[a._v("#")]),a._v(" 什么是 RPC")]),a._v(" "),r("p",[a._v("RPC 的全称是 "),r("strong",[a._v("Remote Procedure Call")]),a._v("，即"),r("strong",[a._v("远程过程调用")]),a._v("。")]),a._v(" "),r("p",[a._v("RPC 的主要作用是：")]),a._v(" "),r("ul",[r("li",[a._v("屏蔽远程调用跟本地调用的区别。")]),a._v(" "),r("li",[a._v("隐藏底层网络通信的复杂性。")])]),a._v(" "),r("h3",{attrs:{id:"rpc-通信"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rpc-通信"}},[a._v("#")]),a._v(" RPC 通信")]),a._v(" "),r("p",[a._v("远程调用说明了，RPC 需要通信，那么 RPC 的通信过程是怎样的呢？")]),a._v(" "),r("p",[a._v("RPC 常用于业务系统之间的数据交互，需要保证其可靠性，所以 RPC 一般默认采用 TCP 来传输。")]),a._v(" "),r("p",[a._v("网络传输的数据必须是二进制数据，但调用方请求的出入参数都是对象，所以必须要将其转换，这个过程叫序列化。")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200610153311.png",alt:"img"}})]),a._v(" "),r("ul",[r("li",[a._v("RPC 拦截调用方要执行的远程方法，将方法名、参数等序列化为方便在网络中传输的二进制或 JSON 数据，然后将这些请求信息传给服务提供方；")]),a._v(" "),r("li",[a._v("服务提供方将请求信息反序列化为本地的方法和请求参数，然后执行，最后将执行结果序列化为二进制或 JSON 数据，再回应给调用方。")]),a._v(" "),r("li",[a._v("调用方将应答数据反序列化。")])]),a._v(" "),r("h3",{attrs:{id:"rpc-协议"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rpc-协议"}},[a._v("#")]),a._v(" RPC 协议")]),a._v(" "),r("p",[a._v("既然有了现成的 HTTP 协议，还有必要设计 RPC 协议吗？")]),a._v(" "),r("p",[a._v("有必要。因为 HTTP 这些通信标准协议，数据包中的实际请求数据相对于数据包本身要小很多，有很多无用的内容；并且 HTTP 属于无状态协议，无法将请求和响应关联，每次请求要重新建立连接。这对于高性能的 RPC 来说，HTTP 协议难以满足需求，所以有必要设计一个"),r("strong",[a._v("紧凑的私有协议")]),a._v("。")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200610163132.png",alt:"img"}})]),a._v(" "),r("h2",{attrs:{id:"二、序列化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、序列化"}},[a._v("#")]),a._v(" 二、序列化")]),a._v(" "),r("blockquote",[r("p",[r("strong",[a._v("序列化可以将对象的字节序列持久化——保存在内存、文件、数据库中")]),a._v("。")])]),a._v(" "),r("p",[a._v("序列化是 RPC 的要点之一。")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/1553224129484.png",alt:"img"}})]),a._v(" "),r("h3",{attrs:{id:"常见序列化方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常见序列化方式"}},[a._v("#")]),a._v(" 常见序列化方式")]),a._v(" "),r("h4",{attrs:{id:"jdk-序列化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jdk-序列化"}},[a._v("#")]),a._v(" JDK 序列化")]),a._v(" "),r("blockquote",[r("p",[a._v("有兴趣深入了解 JDK 序列化方式，可以参考："),r("a",{attrs:{href:"https://github.com/dunwu/javacore/blob/master/docs/io/java-serialization.md",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入理解 Java 序列化"),r("OutboundLink")],1)])]),a._v(" "),r("h4",{attrs:{id:"json"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#json"}},[a._v("#")]),a._v(" JSON")]),a._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/FasterXML/jackson",target:"_blank",rel:"noopener noreferrer"}},[a._v("jackson"),r("OutboundLink")],1),a._v("、"),r("a",{attrs:{href:"https://github.com/google/gson",target:"_blank",rel:"noopener noreferrer"}},[a._v("gson"),r("OutboundLink")],1),a._v("、"),r("a",{attrs:{href:"https://github.com/alibaba/fastjson",target:"_blank",rel:"noopener noreferrer"}},[a._v("fastjson"),r("OutboundLink")],1),a._v(" - 适用于对序列化后的数据要求有良好的可读性（转为 json 、xml 形式）。")]),a._v(" "),r("h4",{attrs:{id:"hessian"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hessian"}},[a._v("#")]),a._v(" Hessian")]),a._v(" "),r("p",[r("a",{attrs:{href:"http://hessian.caucho.com/doc/hessian-overview.xtp",target:"_blank",rel:"noopener noreferrer"}},[a._v("hessian"),r("OutboundLink")],1),a._v(" - 适用于对开发体验敏感，性能有要求的内外部系统。")]),a._v(" "),r("p",[a._v("但 Hessian 本身也有问题，官方版本对 Java 里面一些常见对象的类型不支持，比如：")]),a._v(" "),r("ul",[r("li",[a._v("Linked 系列，"),r("code",[a._v("LinkedHashMap")]),a._v("、"),r("code",[a._v("LinkedHashSet")]),a._v(" 等，但是可以通过扩展 "),r("code",[a._v("CollectionDeserializer")]),a._v(" 类修复；")]),a._v(" "),r("li",[a._v("Locale 类，可以通过扩展 "),r("code",[a._v("ContextSerializerFactory")]),a._v(" 类修复；")]),a._v(" "),r("li",[r("code",[a._v("Byte")]),a._v("/"),r("code",[a._v("Short")]),a._v(" 反序列化的时候变成 "),r("code",[a._v("Integer")]),a._v("。")])]),a._v(" "),r("h4",{attrs:{id:"thrift-protobuf"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#thrift-protobuf"}},[a._v("#")]),a._v(" Thrift / Protobuf")]),a._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/apache/thrift",target:"_blank",rel:"noopener noreferrer"}},[a._v("thrift"),r("OutboundLink")],1),a._v("、"),r("a",{attrs:{href:"https://github.com/protocolbuffers/protobuf",target:"_blank",rel:"noopener noreferrer"}},[a._v("protobuf"),r("OutboundLink")],1),a._v(" - 适用于对性能敏感，对开发体验要求不高的内部系统。")]),a._v(" "),r("p",[a._v("初次以外，还有很多其他的序列化方案。那么，RPC 的序列化方式如何选择呢？")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200610193721.png",alt:"img"}})]),a._v(" "),r("p",[a._v("综合以上，Java RPC 框架中序列化方式，一般首选 Protobuf 和 Hessian，二者在性能、通用性、安全性、兼容性、空间开销上都表现不错。其中，Protobuf 性能、通用性更好；而 Hessian 在开发体验上更为便捷。")]),a._v(" "),r("h3",{attrs:{id:"序列化问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#序列化问题"}},[a._v("#")]),a._v(" 序列化问题")]),a._v(" "),r("p",[a._v("Java 对象序列化，一般要关注以下问题：")]),a._v(" "),r("p",[a._v("常规性问题：")]),a._v(" "),r("ul",[r("li",[a._v("当父类继承 "),r("code",[a._v("Serializable")]),a._v(" 接口时，所有子类都可以被序列化。")]),a._v(" "),r("li",[a._v("子类实现了 "),r("code",[a._v("Serializable")]),a._v(" 接口，父类没有，则父类的属性不会被序列化（不报错，数据丢失），子类的属性仍可以正确序列化。")]),a._v(" "),r("li",[a._v("如果序列化的属性是对象，则这个对象也必须实现 "),r("code",[a._v("Serializable")]),a._v(" 接口，否则会报错。")]),a._v(" "),r("li",[a._v("在反序列化时，如果对象的属性有修改或删减，则修改的部分属性会丢失，但不会报错。")]),a._v(" "),r("li",[a._v("在反序列化时，如果 "),r("code",[a._v("serialVersionUID")]),a._v(" 被修改，则反序列化时会失败。")])]),a._v(" "),r("p",[a._v("设计问题：")]),a._v(" "),r("ul",[r("li",[r("strong",[a._v("对象过于复杂、庞大")]),a._v(" - 对象过于复杂、庞大，会降低序列化、反序列化的效率，并增加传输开销，从而导致响应时延增大。")]),a._v(" "),r("li",[r("strong",[a._v("对象有复杂的继承关系")]),a._v(" - 对象关系越复杂，就越浪费性能，同时又很容易出现序列化上的问题。")]),a._v(" "),r("li",[r("strong",[a._v("使用序列化框架不支持的类作为入参类")]),a._v(" - 比如 Hessian 框架，他天然是不支持 LinkHashMap、LinkedHashSet 等，而且大多数情况下最好不要使用第三方集合类，如 Guava 中的集合类，很多开源的序列化框架都是优先支持编程语言原生的对象。因此如果入参是集合类，应尽量选用原生的、最为常用的集合类，如 HashMap、ArrayList。")])]),a._v(" "),r("h2",{attrs:{id:"三、反射-动态代理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、反射-动态代理"}},[a._v("#")]),a._v(" 三、反射+动态代理")]),a._v(" "),r("p",[a._v("RPC 的远程过程调用时通过反射+动态代理实现的。")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200610161617.png",alt:"img"}})]),a._v(" "),r("p",[a._v("RPC 框架会自动为要调用的接口生成一个代理类。当在项目中注入接口的时候，运行过程中实际绑定的就是这个接口生成的代理类。在接口方法被调用时，会被代理类拦截，这样，就可以在生成的代理类中，加入远程调用逻辑。")]),a._v(" "),r("p",[a._v("除了 JDK 默认的 "),r("code",[a._v("InvocationHandler")]),a._v(" 能完成代理功能，还有很多其他的第三方框架也可以，比如像 Javassist、Byte Buddy 这样的框架。")]),a._v(" "),r("blockquote",[r("p",[a._v("反射+动态代理更多详情可以参考："),r("a",{attrs:{href:"https://github.com/dunwu/javacore/blob/master/docs/basics/java-reflection.md",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入理解 Java 反射和动态代理"),r("OutboundLink")],1)])]),a._v(" "),r("h2",{attrs:{id:"四、网络通信"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、网络通信"}},[a._v("#")]),a._v(" 四、网络通信")]),a._v(" "),r("p",[a._v("一次 RPC 调用，本质就是服务消费者与服务提供者间的一次网络信息交换的过程。可见，通信时 RPC 实现的核心。")]),a._v(" "),r("p",[a._v("常见的网络 IO 模型有：同步阻塞（BIO）、同步非阻塞（NIO）、异步非阻塞（AIO）。")]),a._v(" "),r("h3",{attrs:{id:"io-多路复用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#io-多路复用"}},[a._v("#")]),a._v(" IO 多路复用")]),a._v(" "),r("p",[a._v("IO 多路复用（Reactor 模式）在高并发场景下使用最为广泛，很多知名软件都应用了这一技术，如：Netty、Redis、Nginx 等。")]),a._v(" "),r("p",[a._v("IO 多路复用分为 select，poll 和 epoll。")]),a._v(" "),r("p",[a._v("什么是 IO 多路复用？字面上的理解，多路就是指多个通道，也就是多个网络连接的 IO，而复用就是指多个通道复用在一个复用器上。")]),a._v(" "),r("h3",{attrs:{id:"零拷贝"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#零拷贝"}},[a._v("#")]),a._v(" 零拷贝")]),a._v(" "),r("p",[a._v("系统内核处理 IO 操作分为两个阶段——等待数据和拷贝数据。等待数据，就是系统内核在等待网卡接收到数据后，把数据写到内核中；而拷贝数据，就是系统内核在获取到数据后，将数据拷贝到用户进程的空间中。")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200717154300",alt:"img"}})]),a._v(" "),r("p",[a._v("应用进程的每一次写操作，都会把数据写到用户空间的缓冲区中，再由 CPU 将数据拷贝到系统内核的缓冲区中，之后再由 DMA 将这份数据拷贝到网卡中，最后由网卡发送出去。这里我们可以看到，一次写操作数据要拷贝两次才能通过网卡发送出去，而用户进程的读操作则是将整个流程反过来，数据同样会拷贝两次才能让应用程序读取到数据。")]),a._v(" "),r("p",[a._v("应用进程的一次完整的读写操作，都需要在用户空间与内核空间中来回拷贝，并且每一次拷贝，都需要 CPU 进行一次上下文切换（由用户进程切换到系统内核，或由系统内核切换到用户进程），这样很浪费 CPU 和性能。")]),a._v(" "),r("p",[a._v("所谓的零拷贝，就是取消用户空间与内核空间之间的数据拷贝操作，应用进程每一次的读写操作，可以通过一种方式，直接将数据写入内核或从内核中读取数据，再通过 DMA 将内核中的数据拷贝到网卡，或将网卡中的数据 copy 到内核。")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200717154716.jfif",alt:"img"}})]),a._v(" "),r("p",[a._v("Netty 的零拷贝偏向于用户空间中对数据操作的优化，这对处理 TCP 传输中的拆包粘包问题有着重要的意义，对应用程序处理请求数据与返回数据也有重要的意义。")]),a._v(" "),r("p",[a._v("Netty 框架中很多内部的 ChannelHandler 实现类，都是通过 CompositeByteBuf、slice、wrap 操作来处理 TCP 传输中的拆包与粘包问题的。")]),a._v(" "),r("p",[a._v("Netty 的 ByteBuffer 可以采用 Direct Buffers，使用堆外直接内存进行 Socketd 的读写\n操作，最终的效果与我刚才讲解的虚拟内存所实现的效果是一样的。")]),a._v(" "),r("p",[a._v("Netty 还提供 FileRegion 中包装 NIO 的 FileChannel.transferTo() 方法实现了零拷\n贝，这与 Linux 中的 sendfile 方式在原理上也是一样的。")]),a._v(" "),r("h2",{attrs:{id:"五、rpc-架构模型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#五、rpc-架构模型"}},[a._v("#")]),a._v(" 五、RPC 架构模型")]),a._v(" "),r("p",[a._v("了解前面的知识点（序列化、动态代理、通信），其实已经可以实现一个点对点的 RPC 架构了。")]),a._v(" "),r("p",[a._v("采用微内核架构的 RPC 架构模型：")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200610164920.png",alt:"img"}})]),a._v(" "),r("p",[a._v("在 RPC 框架里面，怎么支持插件化架构的呢？我们可以将每个功能点抽象成一个接\n口，将这个接口作为插件的契约，然后把这个功能的接口与功能的实现分离，并提供接口的默认实现。在 Java 里面，JDK 有自带的 SPI（Service Provider Interface）服务发现机\n制，它可以动态地为某个接口寻找服务实现。使用 SPI 机制需要在 Classpath 下的 "),r("code",[a._v("META-INF/services")]),a._v(" 目录里创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体实现类。")]),a._v(" "),r("p",[a._v("但在实际项目中，我们其实很少使用到 JDK 自带的 SPI 机制，首先它不能按需加载，\n"),r("code",[a._v("ServiceLoader")]),a._v(" 加载某个接口实现类的时候，会遍历全部获取，也就是接口的实现类得全部载入并实例化一遍，会造成不必要的浪费。另外就是扩展如果依赖其它的扩展，那就做不到自动注入和装配，这就很难和其他框架集成，比如扩展里面依赖了一个 Spring Bean，原生的 Java SPI 就不支持。")]),a._v(" "),r("h2",{attrs:{id:"六、服务注册和发现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#六、服务注册和发现"}},[a._v("#")]),a._v(" 六、服务注册和发现")]),a._v(" "),r("p",[a._v("RPC 框架必须要有服务注册和发现机制，这样，集群中的节点才能知道通信方的请求地址。")]),a._v(" "),r("ul",[r("li",[r("strong",[a._v("服务注册")]),a._v("：在服务提供方启动的时候，将对外暴露的接口注册到注册中心之中，注册中心将这个服务节点的 IP 和接口保存下来。")]),a._v(" "),r("li",[r("strong",[a._v("服务订阅")]),a._v("：在服务调用方启动的时候，去注册中心查找并订阅服务提供方的 IP，然后缓存到本地，并用于后续的远程调用。")])]),a._v(" "),r("h3",{attrs:{id:"基于-zookeeper-的服务发现"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基于-zookeeper-的服务发现"}},[a._v("#")]),a._v(" 基于 ZooKeeper 的服务发现")]),a._v(" "),r("p",[a._v("使用 ZooKeeper 作为服务注册中心，是 Java 分布式系统的经典方案。")]),a._v(" "),r("p",[a._v("搭建一个 ZooKeeper 集群作为注册中心集群，服务注册的时候只需要服务节点向 ZooKeeper 节点写入注册信息即可，利用 ZooKeeper 的 Watcher 机制完成服务订阅与服务下发功能")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200610180056.png",alt:"img"}})]),a._v(" "),r("p",[a._v("通常我们可以使用 ZooKeeper、etcd 或者分布式缓存（如 Hazelcast）来解决事件通知问题，但当集群达到一定规模之后，依赖的 ZooKeeper 集群、etcd 集群可能就不稳定了，无法满足我们的需求。")]),a._v(" "),r("p",[a._v("在超大规模的服务集群下，注册中心所面临的挑战就是超大批量服务节点同时上下线，注册中心集群接受到大量服务变更请求，集群间各节点间需要同步大量服务节点数据，最终导致如下问题：")]),a._v(" "),r("ul",[r("li",[a._v("注册中心负载过高；")]),a._v(" "),r("li",[a._v("各节点数据不一致；")]),a._v(" "),r("li",[a._v("服务下发不及时或下发错误的服务节点列表。")])]),a._v(" "),r("p",[a._v("RPC 框架依赖的注册中心的服务数据的一致性其实并不需要满足 CP，只要满足 AP 即可。")]),a._v(" "),r("h3",{attrs:{id:"基于消息总线的最终一致性的注册中心"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基于消息总线的最终一致性的注册中心"}},[a._v("#")]),a._v(" 基于消息总线的最终一致性的注册中心")]),a._v(" "),r("p",[a._v("ZooKeeper 的一大特点就是强一致性，ZooKeeper 集群的每个节点的数据每次发生更新操作，都会通知其它 ZooKeeper 节点同时执行更新。它要求保证每个节点的数据能够实时的完全一致，这也就直接导致了 ZooKeeper 集群性能上的下降。")]),a._v(" "),r("p",[a._v("而 RPC 框架的服务发现，在服务节点刚上线时，服务调用方是可以容忍在一段时间之后\n（比如几秒钟之后）发现这个新上线的节点的。毕竟服务节点刚上线之后的几秒内，甚至更长的一段时间内没有接收到请求流量，对整个服务集群是没有什么影响的，所以我们可以牺牲掉 CP（强制一致性），而选择 AP（最终一致），来换取整个注册中心集群的性能和稳定性。")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200717162006.png",alt:"img"}})]),a._v(" "),r("h2",{attrs:{id:"七、健康检查"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#七、健康检查"}},[a._v("#")]),a._v(" 七、健康检查")]),a._v(" "),r("p",[r("strong",[a._v("使用频率适中的心跳去检测目标机器的健康状态")]),a._v("。")]),a._v(" "),r("ul",[r("li",[a._v("健康状态：建立连接成功，并且心跳探活也一直成功；")]),a._v(" "),r("li",[a._v("亚健康状态：建立连接成功，但是心跳请求连续失败；")]),a._v(" "),r("li",[a._v("死亡状态：建立连接失败。")])]),a._v(" "),r("p",[a._v("可以"),r("strong",[a._v("使用可用率来作为健康状态的量化标准")]),a._v("：")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("可用率 = 一个时间窗口内接口调用成功次数 / 总调用次数\n")])])]),r("p",[a._v("当可用率低于某个比例，就认为这个节点存在问题，把它挪到亚健康列表，这样既考虑了高低频的调用接口，也兼顾了接口响应时间不同的问题。")]),a._v(" "),r("h2",{attrs:{id:"八、路由和负载均衡"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#八、路由和负载均衡"}},[a._v("#")]),a._v(" 八、路由和负载均衡")]),a._v(" "),r("p",[a._v("对于服务调用方来说，一个接口会有多个服务提供方同时提供服务，所以我们的 RPC 在每次发起请求的时候，都需要从多个服务提供方节点里面选择一个用于发请求的节点。这被称为路由策略。")]),a._v(" "),r("ul",[r("li",[a._v("IP 路由：最简单的当然是 IP 路由，因为服务上线后，会暴露服务到注册中心，将自身 IP、端口等元信息告知注册中心。这样消费方就可以在向注册中心请求服务地址时，感知其存在。")]),a._v(" "),r("li",[a._v("参数路由：但有时，会有一些复杂的场景，如：灰度发布、定点调用，我们并不希望上线的服务被所有消费者感知，为了更加细粒度的控制，可以使用参数路由。通过参数控制通信的路由策略。")])]),a._v(" "),r("p",[a._v("除了特殊场景的路由策略以外，对于机器中多个服务方，如何选择调用哪个服务节点，可以应用负载均衡策略。RPC 负载均衡策略一般包括随机、轮询、一致性 Hash、最近最少连接等。")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200717163401.png",alt:"img"}})]),a._v(" "),r("blockquote",[r("p",[a._v("负载均衡详情可以参考："),r("a",{attrs:{href:"https://github.com/dunwu/blog/blob/master/source/_posts/distributed/load-balance.md",target:"_blank",rel:"noopener noreferrer"}},[a._v("负载均衡基本原理"),r("OutboundLink")],1)])]),a._v(" "),r("h3",{attrs:{id:"超时重试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#超时重试"}},[a._v("#")]),a._v(" 超时重试")]),a._v(" "),r("p",[a._v("超时重试机制是指：当调用端发起的请求失败或超时未收到响应时，RPC 框架自身可以进行重试，再重新发送请求，用户可以自行设置是否开启重试以及重试的次数。")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200610193748.png",alt:"img"}})]),a._v(" "),r("h3",{attrs:{id:"限流、降级、熔断"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#限流、降级、熔断"}},[a._v("#")]),a._v(" 限流、降级、熔断")]),a._v(" "),r("p",[a._v("限流方案：Redis + lua、Sentinel")]),a._v(" "),r("p",[a._v("熔断方案：Hystrix")]),a._v(" "),r("h3",{attrs:{id:"优雅启动关闭"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#优雅启动关闭"}},[a._v("#")]),a._v(" 优雅启动关闭")]),a._v(" "),r("p",[a._v("如何避免服务停机带来的业务损失：")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200610193806.png",alt:"img"}})]),a._v(" "),r("p",[a._v("如何避免流量打到没有启动完成的节点：")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200610193829.png",alt:"img"}})]),a._v(" "),r("h2",{attrs:{id:"九、容错处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#九、容错处理"}},[a._v("#")]),a._v(" 九、容错处理")]),a._v(" "),r("h3",{attrs:{id:"异常重试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#异常重试"}},[a._v("#")]),a._v(" 异常重试")]),a._v(" "),r("p",[a._v("就是当调用端发起的请求失败时，RPC 框架自身可以进行重试，再重新发送请求，用户可以自行设置是否开启重试以及重试的次数。")]),a._v(" "),r("p",[a._v("当然，不是所有的异常都要触发重试，只有符合重试条件的异常才能触发重试，比如网络超时异常、网络连接异常等等（这个需要 RPC 去判定）。")]),a._v(" "),r("blockquote",[r("p",[a._v("注意：有时网络可能发生抖动，导致请求超时，这时如果 RPC 触发超时重试，会触发业务逻辑重复执行，如果接口没有幂等性设计，就可能引发问题。如：重发写表。")])]),a._v(" "),r("h3",{attrs:{id:"重试超时时间"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#重试超时时间"}},[a._v("#")]),a._v(" 重试超时时间")]),a._v(" "),r("p",[a._v("连续的异常重试可能会出现一种不可靠的情况，那就是连续的异常重试并且每次处理的请求时间比较长，最终会导致请求处理的时间过长，超出用户设置的超时时间。")]),a._v(" "),r("p",[a._v("解决这个问题最直接的方式就是，在每次重试后都重置一下请求的超时时间。")]),a._v(" "),r("p",[a._v("当调用端发起 RPC 请求时，如果发送请求发生异常并触发了异常重试，我们可以先判定下这个请求是否已经超时，如果已经超时了就直接返回超时异常，否则就先重置下这个请求的超时时间，之后再发起重试。")]),a._v(" "),r("p",[a._v("在所有发起重试、负载均衡选择节点的时候，去掉重试之前出现过问题的那个节点，以保证重试的成功率。")]),a._v(" "),r("h3",{attrs:{id:"业务异常"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#业务异常"}},[a._v("#")]),a._v(" 业务异常")]),a._v(" "),r("p",[a._v("RPC 框架是不会知道哪些业务异常能够去进行异常重试的，我们可以加个重试异常的白名\n单，用户可以将允许重试的异常加入到这个白名单中。当调用端发起调用，并且配置了异常重试策略，捕获到异常之后，我们就可以采用这样的异常处理策略。如果这个异常是 RPC 框架允许重试的异常，或者这个异常类型存在于可重试异常的白名单中，我们就允许对这个请求进行重试。")]),a._v(" "),r("hr"),a._v(" "),r("p",[a._v("综上，一个可靠的 RPC 容错处理机制如下：")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200717163921.png",alt:"img"}})]),a._v(" "),r("h2",{attrs:{id:"十、优雅上线下线"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#十、优雅上线下线"}},[a._v("#")]),a._v(" 十、优雅上线下线")]),a._v(" "),r("p",[a._v("如何避免服务停机带来的业务损失？")]),a._v(" "),r("h3",{attrs:{id:"优雅下线"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#优雅下线"}},[a._v("#")]),a._v(" 优雅下线")]),a._v(" "),r("p",[a._v("当服务提供方正在关闭，如果这之后还收到了新的业务请求，服务提供方直接返回一个特定的异常给调用方（比如 ShutdownException）。这个异常就是告诉调用方“我已经收到这个请求了，但是我正在关闭，并没有处理这个请求”，然后调用方收到这个异常响应后，RPC 框架把这个节点从健康列表挪出，并把请求自动重试到其他节点，因为这个请求是没有被服务提供方处理过，所以可以安全地重试到其他节点，这样就可以实现对业务无损。")]),a._v(" "),r("p",[a._v("在 Java 语言里面，对应的是 Runtime.addShutdownHook 方法，可以注册关闭的钩子。在 RPC 启动的时候，我们提前注册关闭钩子，并在里面添加了两个处理程序，一个负责开启关闭标识，一个负责安全关闭服务对象，服务对象在关闭的时候会通知调用方下线节点。同时需要在我们调用链里面加上挡板处理器，当新的请求来的时候，会判断关闭标识，如果正在关闭，则抛出特定异常。")]),a._v(" "),r("p",[r("img",{attrs:{src:"C:%5CUsers%5Czp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200718205036132.png",alt:"image-20200718205036132"}})]),a._v(" "),r("h3",{attrs:{id:"优雅上线"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#优雅上线"}},[a._v("#")]),a._v(" 优雅上线")]),a._v(" "),r("h4",{attrs:{id:"启动预热"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#启动预热"}},[a._v("#")]),a._v(" 启动预热")]),a._v(" "),r("p",[a._v("启动预热，就是让刚启动的服务提供方应用不承担全部的流量，而是让它被调用的次数随着时间的移动慢慢增加，最终让流量缓和地增加到跟已经运行一段时间后的水平一样。")]),a._v(" "),r("p",[a._v("首先，在真实环境中机器都会默认开启 NTP 时间同步功能，来保证所有机器时间的一致性。")]),a._v(" "),r("p",[a._v("调用方通过服务发现，除了可以拿到 IP 列表，还可以拿到对应的启动时间。我们需要把这个时间作用在负载均衡上。")]),a._v(" "),r("p",[r("img",{attrs:{src:"C:%5CUsers%5Czp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200718210228814.png",alt:"image-20200718210228814"}})]),a._v(" "),r("p",[a._v("通过这个小逻辑的改动，我们就可以保证当服务提供方运行时长小于预热时间时，对服务提供方进行降权，减少被负载均衡选择的概率，避免让应用在启动之初就处于高负载状态，从而实现服务提供方在启动后有一个预热的过程。")]),a._v(" "),r("h4",{attrs:{id:"延迟暴露"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#延迟暴露"}},[a._v("#")]),a._v(" 延迟暴露")]),a._v(" "),r("p",[a._v("服务提供方应用在没有启动完成的时候，调用方的请求就过来了，而调用方请求过来的原因是，服务提供方应用在启动过程中把解析到的 RPC 服务注册到了注册中心，这就导致在后续加载没有完成的情况下服务提供方的地址就被服务调用方感知到了。")]),a._v(" "),r("p",[a._v("为了解决这个问题，需要在应用启动加载、解析 Bean 的时候，如果遇到了 RPC 服务的 Bean，只先把这个\nBean 注册到 Spring-BeanFactory 里面去，而并不把这个 Bean 对应的接口注册到注册中心，只有等应用启动完成后，才把接口注册到注册中心用于服务发现，从而实现让服务调用方延迟获取到服务提供方地址。")]),a._v(" "),r("p",[a._v("具体如何实现呢？")]),a._v(" "),r("p",[a._v("我们可以在服务提供方应用启动后，接口注册到注册中心前，预留一个 Hook 过程，让用户可以实现可扩展的\nHook 逻辑。用户可以在 Hook 里面模拟调用逻辑，从而使 JVM 指令能够预热起来，并且用户也可以在 Hook 里面事先预加载一些资源，只有等所有的资源都加载完成后，最后才把接口注册到注册中心。")]),a._v(" "),r("p",[r("img",{attrs:{src:"C:%5CUsers%5Czp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200718210019621.png",alt:"image-20200718210019621"}})]),a._v(" "),r("h2",{attrs:{id:"十一、限流熔断"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#十一、限流熔断"}},[a._v("#")]),a._v(" 十一、限流熔断")]),a._v(" "),r("p",[a._v("限流算法有很多，比如最简单的计数器，还有可以做到平滑限流的滑动窗口、漏斗算法以及令牌桶算法等等。其中令牌桶算法最为常用。")]),a._v(" "),r("p",[a._v("服务端主要是通过限流来进行自我保护，我们在实现限流时要考虑到应用和 IP 级别，方便我们在服务治理的时候，对部分访问量特别大的应用进行合理的限流。")]),a._v(" "),r("p",[a._v("服务端的限流阈值配置都是作用于单机的，而在有些场景下，例如对整个服务设置限流阈值，服务进行扩容时，\n限流的配置并不方便，我们可以在注册中心或配置中心下发限流阈值配置的时候，将总服务节点数也下发给服务节点，让 RPC 框架自己去计算限流阈值。")]),a._v(" "),r("p",[a._v("我们还可以让 RPC 框架的限流模块依赖一个专门的限流服务，对服务设置限流阈值进行精准地控制，但是这种方式依赖了限流服务，相比单机的限流方式，在性能和耗时上有劣势。")]),a._v(" "),r("p",[a._v("调用端可以通过熔断机制进行自我保护，防止调用下游服务出现异常，或者耗时过长影响调\n用端的业务逻辑，RPC 框架可以在动态代理的逻辑中去整合熔断器，实现 RPC 框架的熔断\n功能。")]),a._v(" "),r("h2",{attrs:{id:"十二、业务分组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#十二、业务分组"}},[a._v("#")]),a._v(" 十二、业务分组")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200718204407.png",alt:"img"}})]),a._v(" "),r("p",[a._v("在 RPC 里面我们可以通过分组的方式人为地给不同的调用方划分出不同的小集群，从而实现调用方流量隔离的效果，保障我们的核心业务不受非核心业务的干扰。但我们在考虑问题的时候，不能顾此失彼，不能因为新加一个的功能而影响到原有系统的稳定性。")]),a._v(" "),r("p",[a._v("其实我们不仅可以通过分组把服务提供方划分成不同规模的小集群，我们还可以利用分组完成一个接口多种实现的功能。正常情况下，为了方便我们自己管理服务，我一般都会建议每个接口完成的功能尽量保证唯一。但在有些特殊场景下，两个接口也会完全一样，只是具体实现上有那么一点不同，那么我们就可以在服务提供方应用里面同时暴露两个相同接口，但只是接口分组不一样罢了。")]),a._v(" "),r("h3",{attrs:{id:"动态分组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态分组"}},[a._v("#")]),a._v(" 动态分组")]),a._v(" "),r("p",[a._v("分组可以帮助服务提供方实现调用方的隔离。但是因为调用方流量并不是一成不变的，而且还可能会因为突发事件导致某个分组的流量溢出，而在整个大集群还有富余能力的时候，又因为分组隔离不能为出问题的集群提供帮助。")]),a._v(" "),r("p",[a._v("为了解决这种突发流量的问题，我们提供了一种更高效的方案，可以实现分组的快速伸缩。事实上我们还可以利用动态分组解决分组后给每个分组预留机器冗余的问题，我们没有必要把所有冗余的机器都分配到分组里面，我们可以把这些预留的机器做成一个共享的池子，从而减少整体预留的实例数量。")]),a._v(" "),r("h2",{attrs:{id:"十三、链路跟踪"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#十三、链路跟踪"}},[a._v("#")]),a._v(" 十三、链路跟踪")]),a._v(" "),r("p",[a._v("分布式链路跟踪就是将一次分布式请求还原为一个完整的调用链路，我们可以在整个调用链路中跟踪到这一次分布式请求的每一个环节的调用情况，比如调用是否成功，返回什么异常，调用的哪个服务节点以及请求耗时等等。")]),a._v(" "),r("p",[a._v("Trace 就是代表整个链路，每次分布式都会产生一个 Trace，每个 Trace 都有它的唯一标识即 TraceId，在分布式链路跟踪系统中，就是通过 TraceId 来区分每个 Trace 的。\nSpan 就是代表了整个链路中的一段链路，也就是说 Trace 是由多个 Span 组成的。在一个 Trace 下，每个 Span 也都有它的唯一标识 SpanId，而 Span 是存在父子关系的。还是以讲过的例子为例子，在 A->B->C->D 的情况下，在整个调用链中，正常情况下会产生 3 个 Span，分别是 Span1（A->B）、Span2（B->C）、Span3（C->D），这时 Span3 的父 Span 就是 Span2，而 Span2 的父 Span 就是 Span1。")]),a._v(" "),r("p",[a._v("RPC 在整合分布式链路跟踪需要做的最核心的两件事就是“埋点”和“传递”。")]),a._v(" "),r("p",[a._v("我们前面说是因为各子应用、子服务间复杂的依赖关系，所以通过日志难定位问题。那我们就想办法通过日志定位到是哪个子应用的子服务出现问题就行了。")]),a._v(" "),r("p",[a._v("其实，在 RPC 框架打印的异常信息中，是包括定位异常所需要的异常信息的，比如是哪类异常引起的问题（如序列化问题或网络超时问题），是调用端还是服务端出现的异常，调用端与服务端的 IP 是什么，以及服务接口与服务分组都是什么等等。具体如下图所示：")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200719082205.png",alt:"img"}})]),a._v(" "),r("h2",{attrs:{id:"十四、泛化调用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#十四、泛化调用"}},[a._v("#")]),a._v(" 十四、泛化调用")]),a._v(" "),r("p",[a._v("在一些特定场景下，需要在没有接口的情况下进行 RPC 调用。例如：")]),a._v(" "),r("p",[a._v("场景一：搭建一个统一的测试平台，可以让各个业务方在测试平台中通过输入接口、分组名、方法名以及参数值，在线测试自己发布的 RPC 服务。")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200719095518.png",alt:"img"}})]),a._v(" "),r("p",[a._v("场景二：搭建一个轻量级的服务网关，可以让各个业务方用 HTTP 的方式，通过服务网关调用其它服务。")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200719095704.png",alt:"img"}})]),a._v(" "),r("p",[a._v("为了解决这些场景的问题，可以使用泛化调用。")]),a._v(" "),r("p",[a._v("就是 RPC 框架提供统一的泛化调用接口（GenericService），调用端在创建 GenericService 代理时指定真正需要调用的接口的接口名以及分组名，通过调用 GenericService 代理的 $invoke 方法将服务端所需要的所有信息，包括接口名、业务分组名、方法名以及参数信息等封装成请求消息，发送给服务端，实现在没有接口的情况下进行\nRPC 调用的功能。")]),a._v(" "),r("div",{staticClass:"language-java extra-class"},[r("pre",{pre:!0,attrs:{class:"language-java"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("GenericService")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),a._v(" $"),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("invoke")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" methodName"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" paramTypes"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" params"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CompletableFuture")]),r("span",{pre:!0,attrs:{class:"token generics"}},[r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Object")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" $"),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("asyncInvoke")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" methodName"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" paramTypes\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),r("p",[a._v("而通过泛化调用的方式发起调用，由于调用端没有服务端提供方提供的接口 API，不能正常地进行序列化与反序列化，我们可以为泛化调用提供专属的序列化插件，来解决实际问题。")]),a._v(" "),r("h2",{attrs:{id:"时钟轮"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#时钟轮"}},[a._v("#")]),a._v(" 时钟轮")]),a._v(" "),r("p",[a._v("时钟轮这个机制很好地解决了定时任务中，因每个任务都创建一个线程，导致的创建过多线程的问题，以及一个线程扫描所有的定时任务，让 CPU 做了很多额外的轮询遍历操作而浪费 CPU 的问题。")]),a._v(" "),r("p",[a._v("时钟轮的实现机制就是模拟现实生活中的时钟，将每个定时任务放到对应的时间槽位上，这样可以减少扫描任务时对其它时间槽位定时任务的额外遍历操作。")]),a._v(" "),r("p",[a._v("在时间轮的使用中，有些问题需要你额外注意：")]),a._v(" "),r("p",[a._v("时间槽位的单位时间越短，时间轮触发任务的时间就越精确。例如时间槽位的单位时间是 10 毫秒，那么执行定时任务的时间误差就在 10 毫秒内，如果是 100 毫秒，那么误差就在 100 毫秒内。")]),a._v(" "),r("p",[a._v("时间轮的槽位越多，那么一个任务被重复扫描的概率就越小，因为只有在多层时钟轮中的任务才会被重复扫描。比如一个时间轮的槽位有 1000 个，一个槽位的单位时间是 10 毫秒，那么下一层时间轮的一个槽位的单位时间就是 10 秒，超过 10 秒的定时任务会被放到下一层时间轮中，也就是只有超过 10 秒的定时任务会被扫描遍历两次，但如果槽位是 10 个，那么超过 100 毫秒的任务，就会被扫描遍历两次。")]),a._v(" "),r("p",[a._v("结合这些特点，我们就可以视具体的业务场景而定，对时钟轮的周期和时间槽数进行设置。")]),a._v(" "),r("p",[a._v("在 RPC 框架中，只要涉及到定时任务，我们都可以应用时钟轮，比较典型的就是调用端的超时处理、调用端与服务端的启动超时以及定时心跳等等。")]),a._v(" "),r("h2",{attrs:{id:"流量回放"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#流量回放"}},[a._v("#")]),a._v(" 流量回放")]),a._v(" "),r("p",[a._v("所谓的流量就是某个时间段内的所有请求，我们通过某种手段把发送到 A 应用的所有请求录制下来，然后把这些请求统一转发到 B 应用，让 B 应用接收到的请求参数跟 A 应用保持一致，从而实现 A 接收到的请求在 B 应用里面重新请求了一遍。整个过程称之为“"),r("strong",[a._v("流量回放")]),a._v("”。")]),a._v(" "),r("p",[a._v("流量回放可以做什么？")]),a._v(" "),r("p",[a._v("为了保障应用升级后，我们的业务行为还能保持和升级前一样，我们在大多数情况下都是依靠已有的 TestCase 去验证，但这种方式在一定程度上并不是完全可靠的。最可靠的方式就是引入线上 Case 去验证改造后的应用，把线上的真实流量在改造后的应用里面进行回放，这样不仅节省整个上线时间，还能弥补手动维护 Case 存在的缺陷。")]),a._v(" "),r("p",[a._v("应用引入了 RPC 后，所有的请求流量都会被 RPC 接管，所以我们可以很自然地在 RPC 里面支持流量回放功能。虽然这个功能本身并不是 RPC 的核心功能，但对于使用 RPC 的人来说，他们有了这个功能之后，就可以更放心地升级自己的应用了。")]),a._v(" "),r("h2",{attrs:{id:"rpc-高级"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rpc-高级"}},[a._v("#")]),a._v(" RPC 高级")]),a._v(" "),r("h3",{attrs:{id:"rpc-性能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rpc-性能"}},[a._v("#")]),a._v(" RPC 性能")]),a._v(" "),r("p",[a._v("如何提升单机吞吐量？")]),a._v(" "),r("p",[a._v("大多数情况下，影响到 RPC 调用的吞吐量的原因也就是业务逻辑处理慢了，CPU 大部分时间都在等待资源。")]),a._v(" "),r("p",[a._v("为了解决等待的耗时，可以使用"),r("strong",[a._v("异步")]),a._v("。异步可以使用 Future 或 Callback 方式，Future 最为简单。")]),a._v(" "),r("p",[r("img",{attrs:{src:"C:%5CUsers%5Czp%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200719081257192.png",alt:"image-20200719081257192"}})]),a._v(" "),r("p",[a._v("另外，我们可以通过对 CompletableFuture 的支持，实现 RPC 调用在调用端与服务端之间的完全异步，同时提升两端的单机吞吐量。")]),a._v(" "),r("h3",{attrs:{id:"rpc-安全"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rpc-安全"}},[a._v("#")]),a._v(" RPC 安全")]),a._v(" "),r("p",[a._v("虽然 RPC 经常用于解决内网应用之间的调用，内网环境相对公网也没有那么恶劣，但我们也有必要去建立一套可控的安全体系，去防止一些错误行为。对于 RPC 来说，我们所关心的安全问题不会有公网应用那么复杂，我们只要保证让服务调用方能拿到真实的服务提供方 IP 地址集合，且服务提供方可以管控调用自己的应用就够了。")]),a._v(" "),r("p",[a._v("服务提供方应用里面放一个用于 HMAC 签名的私钥，在授权平台上用这个私钥为申请调用的调用方应用进行签名，这个签名生成的串就变成了调用方唯一的身份。服务提供方在收到调用方的授权请求之后，我们只要需要验证下这个签名跟调用方应用信息是否对应得上就行了，这样集中式授权的瓶颈也就不存在了。")]),a._v(" "),r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[a._v("#")]),a._v(" 参考资料")]),a._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://time.geekbang.org/column/intro/280",target:"_blank",rel:"noopener noreferrer"}},[a._v("《RPC 实战与核心原理》"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);