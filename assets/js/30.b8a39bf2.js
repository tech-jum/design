(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{427:function(a,r,e){"use strict";e.r(r);var s=e(15),t=Object(s.a)({},(function(){var a=this,r=a.$createElement,e=a._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"深入剖析共识性算法-paxos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深入剖析共识性算法-paxos"}},[a._v("#")]),a._v(" 深入剖析共识性算法 Paxos")]),a._v(" "),e("blockquote",[e("p",[a._v("📦 本文已归档到：「"),e("a",{attrs:{href:"https://github.com/dunwu/blog",target:"_blank",rel:"noopener noreferrer"}},[a._v("blog"),e("OutboundLink")],1),a._v("」")]),a._v(" "),e("p",[a._v("Paxos 是一种基于消息传递且具有容错性的共识性（consensus）算法。")]),a._v(" "),e("p",[a._v("Paxos 算法解决的问题正是分布式一致性问题。在一个节点数为 2N+1 的分布式集群中，只要半数以上的节点（N + 1）还正常工作，整个系统仍可以正常工作。")])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200202221611.png",alt:"img"}})]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#1-paxos-%E8%83%8C%E6%99%AF"}},[a._v("1. Paxos 背景")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#2-basic-paxos-%E7%AE%97%E6%B3%95"}},[a._v("2. Basic Paxos 算法")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#21-%E8%A7%92%E8%89%B2"}},[a._v("2.1. 角色")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#22-%E7%AE%97%E6%B3%95"}},[a._v("2.2. 算法")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#23-%E5%AE%9E%E4%BE%8B"}},[a._v("2.3. 实例")])])])]),a._v(" "),e("li",[e("a",{attrs:{href:"#3-multi-paxos-%E7%AE%97%E6%B3%95"}},[a._v("3. Multi Paxos 算法")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#31-basic-paxos-%E7%9A%84%E9%97%AE%E9%A2%98"}},[a._v("3.1. Basic Paxos 的问题")])]),a._v(" "),e("li",[e("a",{attrs:{href:"#32-multi-paxos-%E7%9A%84%E6%94%B9%E8%BF%9B"}},[a._v("3.2. Multi Paxos 的改进")])])])]),a._v(" "),e("li",[e("a",{attrs:{href:"#4-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"}},[a._v("4. 参考资料")])])]),a._v(" "),e("h2",{attrs:{id:"_1-paxos-背景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-paxos-背景"}},[a._v("#")]),a._v(" 1. Paxos 背景")]),a._v(" "),e("p",[a._v("Paxos 是 Leslie Lamport 于 1990 年提出的一种基于消息传递且具有高度容错特性的共识（consensus）算法。")]),a._v(" "),e("p",[a._v("为描述 Paxos 算法，Lamport 虚拟了一个叫做 Paxos 的希腊城邦，这个岛按照议会民主制的政治模式制订法律，但是没有人愿意将自己的全部时间和精力放在这种事情上。所以无论是议员，议长或者传递纸条的服务员都不能承诺别人需要时一定会出现，也无法承诺批准决议或者传递消息的时间。")]),a._v(" "),e("p",[a._v("Paxos 算法包含 2 个部分：")]),a._v(" "),e("ul",[e("li",[a._v("Basic Paxos 算法：描述的多节点之间如何就某个值达成共识。")]),a._v(" "),e("li",[a._v("Multi Paxos 思想：描述的是执行多个 Basic Paxos 实例，就一系列值达成共识。")])]),a._v(" "),e("p",[a._v("Paxos 算法解决的问题正是分布式一致性问题，即一个分布式系统中的各个进程如何就某个值（决议）达成一致。")]),a._v(" "),e("p",[a._v("Paxos 算法运行在允许宕机故障的异步系统中，不要求可靠的消息传递，可容忍消息丢失、延迟、乱序以及重复。它利用大多数 (Majority) 机制保证了 2N+1 的容错能力，即 2N+1 个节点的系统最多允许 N 个节点同时出现故障。")]),a._v(" "),e("h2",{attrs:{id:"_2-basic-paxos-算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-basic-paxos-算法"}},[a._v("#")]),a._v(" 2. Basic Paxos 算法")]),a._v(" "),e("h3",{attrs:{id:"_2-1-角色"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-角色"}},[a._v("#")]),a._v(" 2.1. 角色")]),a._v(" "),e("p",[a._v("Paxos 将分布式系统中的节点分为以下角色：")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("提议者（Proposer）")]),a._v("：发出提案（Proposal）。Proposal 信息包括提案编号 (Proposal ID) 和提议的值 (Value)。")]),a._v(" "),e("li",[e("strong",[a._v("决策者（Acceptor）")]),a._v("：对每个 Proposal 进行投票，若 Proposal 获得多数 Acceptor 的接受，则称该 Proposal 被批准。")]),a._v(" "),e("li",[e("strong",[a._v("学习者（Learner）")]),a._v("：不参与决策，从 Proposers/Acceptors 学习、记录最新达成共识的提案（Value）。")])]),a._v(" "),e("p",[a._v("在多副本状态机中，每个副本都同时具有 Proposer、Acceptor、Learner 三种角色。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20210528150700.png",alt:""}})]),a._v(" "),e("h3",{attrs:{id:"_2-2-算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-算法"}},[a._v("#")]),a._v(" 2.2. 算法")]),a._v(" "),e("p",[a._v("Paxos 算法通过一个决议分为两个阶段（Learn 阶段之前决议已经形成）：")]),a._v(" "),e("ol",[e("li",[a._v("第一阶段：Prepare 阶段。Proposer 向 Acceptors 发出 Prepare 请求，Acceptors 针对收到的 Prepare 请求进行 Promise 承诺。")]),a._v(" "),e("li",[a._v("第二阶段：Accept 阶段。Proposer 收到多数 Acceptors 承诺的 Promise 后，向 Acceptors 发出 Propose 请求，Acceptors 针对收到的 Propose 请求进行 Accept 处理。")]),a._v(" "),e("li",[a._v("第三阶段：Learn 阶段。Proposer 在收到多数 Acceptors 的 Accept 之后，标志着本次 Accept 成功，决议形成，将形成的决议发送给所有 Learners。")])]),a._v(" "),e("p",[a._v("Paxos 算法流程中的每条消息描述如下：")]),a._v(" "),e("ul",[e("li",[e("p",[e("strong",[a._v("Prepare")]),a._v(": Proposer 生成全局唯一且递增的 Proposal ID (可使用时间戳加 Server ID)，向所有 Acceptors 发送 Prepare 请求，这里无需携带提案内容，只携带 Proposal ID 即可。")])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("Promise")]),a._v(": Acceptors 收到 Prepare 请求后，做出“两个承诺，一个应答”。")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("两个承诺：")]),a._v(" "),e("ul",[e("li",[a._v("不再接受 Proposal ID 小于等于当前请求的 Prepare 请求。")]),a._v(" "),e("li",[a._v("不再接受 Proposal ID 小于当前请求的 Propose 请求。")])])]),a._v(" "),e("li",[e("p",[a._v("一个应答：")]),a._v(" "),e("ul",[e("li",[a._v("不违背以前作出的承诺下，回复已经 Accept 过的提案中 Proposal ID 最大的那个提案的 Value 和 Proposal ID，没有则返回空值。")])])])])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("Propose")]),a._v(": Proposer 收到多数 Acceptors 的 Promise 应答后，从应答中选择 Proposal ID 最大的提案的 Value，作为本次要发起的提案。如果所有应答的提案 Value 均为空值，则可以自己随意决定提案 Value。然后携带当前 Proposal ID，向所有 Acceptors 发送 Propose 请求。")])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("Accept")]),a._v(": Acceptor 收到 Propose 请求后，在不违背自己之前作出的承诺下，接受并持久化当前 Proposal ID 和提案 Value。")])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("Learn")]),a._v(": Proposer 收到多数 Acceptors 的 Accept 后，决议形成，将形成的决议发送给所有 Learners。")])])]),a._v(" "),e("h3",{attrs:{id:"_2-3-实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-实例"}},[a._v("#")]),a._v(" 2.3. 实例")]),a._v(" "),e("p",[a._v("下面举几个例子，实例 1 如下图：")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-ac7e4a827f77dc57d316c77ae95e1940_hd.jpg",alt:"img"}})]),a._v(" "),e("p",[a._v("图中 P 代表 Prepare 阶段，A 代表 Accept 阶段。3.1 代表 Proposal ID 为 3.1，其中 3 为时间戳，1 为 Server ID。X 和 Y 代表提议 Value。")]),a._v(" "),e("p",[a._v("实例 1 中 P 3.1 达成多数派，其 Value(X) 被 Accept，然后 P 4.5 学习到 Value(X)，并 Accept。")]),a._v(" "),e("h4",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")]),a._v(" "),e("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-3ae48cb81d39079022666ccb35821c71_hd.jpg",alt:"img"}})]),a._v(" "),e("p",[a._v("实例 2 中 P 3.1 没有被多数派 Accept（只有 S3 Accept），但是被 P 4.5 学习到，P 4.5 将自己的 Value 由 Y 替换为 X，Accept（X）。")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-931f9487900f0f002867c9e116dec255_hd.jpg",alt:"img"}}),a._v("Paxos 算法实例 3")]),a._v(" "),e("p",[a._v("实例 3 中 P 3.1 没有被多数派 Accept（只有 S1 Accept），同时也没有被 P 4.5 学习到。由于 P 4.5 Propose 的所有应答，均未返回 Value，则 P 4.5 可以 Accept 自己的 Value (Y)。后续 P 3.1 的 Accept (X) 会失败，已经 Accept 的 S1，会被覆盖。")]),a._v(" "),e("p",[a._v("Paxos 算法可能形成活锁而永远不会结束，如下图实例所示：")]),a._v(" "),e("p",[e("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-0e18b29659367076ff1c0156ae46eca0_hd.jpg",alt:"img"}}),a._v("Paxos 算法形成活锁")]),a._v(" "),e("p",[a._v("回顾两个承诺之一，Acceptor 不再应答 Proposal ID 小于等于当前请求的 Prepare 请求。意味着需要应答 Proposal ID 大于当前请求的 Prepare 请求。")]),a._v(" "),e("p",[a._v("两个 Proposers 交替 Prepare 成功，而 Accept 失败，形成活锁（Livelock）。")]),a._v(" "),e("h2",{attrs:{id:"_3-multi-paxos-思想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-multi-paxos-思想"}},[a._v("#")]),a._v(" 3. Multi Paxos 思想")]),a._v(" "),e("h3",{attrs:{id:"_3-1-basic-paxos-的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-basic-paxos-的问题"}},[a._v("#")]),a._v(" 3.1. Basic Paxos 的问题")]),a._v(" "),e("p",[a._v("Basic Paxos 有以下问题，导致它不能应用于实际：")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("Basic Paxos 算法只能对一个值形成决议")]),a._v("。")]),a._v(" "),e("li",[e("strong",[a._v("Basic Paxos 算法会消耗大量网络带宽")]),a._v("。Basic Paxos 中，决议的形成至少需要两次网络通信，在高并发情况下可能需要更多的网络通信，极端情况下甚至可能形成活锁。如果想连续确定多个值，Basic Paxos 搞不定了。")])]),a._v(" "),e("h3",{attrs:{id:"_3-2-multi-paxos-的改进"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-multi-paxos-的改进"}},[a._v("#")]),a._v(" 3.2. Multi Paxos 的改进")]),a._v(" "),e("p",[a._v("Multi Paxos 正是为解决以上问题而提出。Multi Paxos 基于 Basic Paxos 做了两点改进：")]),a._v(" "),e("ul",[e("li",[a._v("针对每一个要确定的值，运行一次 Paxos 算法实例（Instance），形成决议。每一个 Paxos 实例使用唯一的 Instance ID 标识。")]),a._v(" "),e("li",[a._v("在所有 Proposer 中选举一个 Leader，由 Leader 唯一地提交 Proposal 给 Acceptor 进行表决。这样没有 Proposer 竞争，解决了活锁问题。在系统中仅有一个 Leader 进行 Value 提交的情况下，Prepare 阶段就可以跳过，从而将两阶段变为一阶段，提高效率。")])]),a._v(" "),e("p",[a._v("Multi Paxos 首先需要选举 Leader，Leader 的确定也是一次决议的形成，所以可执行一次 Basic Paxos 实例来选举出一个 Leader。选出 Leader 之后只能由 Leader 提交 Proposal，在 Leader 宕机之后服务临时不可用，需要重新选举 Leader 继续服务。在系统中仅有一个 Leader 进行 Proposal 提交的情况下，Prepare 阶段可以跳过。")]),a._v(" "),e("p",[a._v("Multi Paxos 通过改变 Prepare 阶段的作用范围至后面 Leader 提交的所有实例，从而使得 Leader 的连续提交只需要执行一次 Prepare 阶段，后续只需要执行 Accept 阶段，将两阶段变为一阶段，提高了效率。为了区分连续提交的多个实例，每个实例使用一个 Instance ID 标识，Instance ID 由 Leader 本地递增生成即可。")]),a._v(" "),e("p",[a._v("Multi Paxos 允许有多个自认为是 Leader 的节点并发提交 Proposal 而不影响其安全性，这样的场景即退化为 Basic Paxos。")]),a._v(" "),e("p",[a._v("Chubby 和 Boxwood 均使用 Multi Paxos。ZooKeeper 使用的 Zab 也是 Multi Paxos 的变形。")]),a._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),e("p",[a._v("你可以看到，Basic Paxos 是通过二阶段提交的方式来达成共识的。二阶段提交是达成共识的常用方式，如果你需要设计新的共识算法的时候，也可以考虑这个方式。")]),a._v(" "),e("p",[a._v("除了共识，Basic Paxos 还实现了容错，在少于一半的节点出现故障时，集群也能工作。它不像分布式事务算法那样，必须要所有节点都同意后才提交操作，因为“所有节点都同意”这个原则，在出现节点故障的时候会导致整个集群不可用。也就是说，“大多数节点都同意”的原则，赋予了 Basic Paxos 容错的能力，让它能够容忍少于一半的节点的故障。")]),a._v(" "),e("h2",{attrs:{id:"_4-参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-参考资料"}},[a._v("#")]),a._v(" 4. 参考资料")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://research.microsoft.com/en-us/um/people/lamport/pubs/lamport-paxos.pdf",target:"_blank",rel:"noopener noreferrer"}},[a._v("Part-time Parliament 论文"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://lamport.azurewebsites.net/pubs/paxos-simple.pdf",target:"_blank",rel:"noopener noreferrer"}},[a._v("Paxos Made Simple 论文"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/31780743",target:"_blank",rel:"noopener noreferrer"}},[a._v("Paxos 算法详解"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://zh.wikipedia.org/w/index.php?title=Paxos%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[a._v("Wiki - Paxos 算法"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://www.bilibili.com/video/BV1TW411M7Fx?from=search&seid=11524608198747599965",target:"_blank",rel:"noopener noreferrer"}},[a._v("一致性算法（Paxos、Raft、Zab）"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://www.bilibili.com/video/av36556594",target:"_blank",rel:"noopener noreferrer"}},[a._v("Raft 作者讲解 Paxos 视频"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=d7nAGI_NZPk",target:"_blank",rel:"noopener noreferrer"}},[a._v("Paxos 算法讲解视频"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=t.exports}}]);