(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{416:function(t,r,e){"use strict";e.r(r);var _=e(15),v=Object(_.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"系统测试架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#系统测试架构"}},[t._v("#")]),t._v(" 系统测试架构")]),t._v(" "),e("blockquote",[e("p",[t._v("软件测试描述一种用来促进鉴定软件的正确性、完整性、安全性和质量的过程。软件测试的经典定义是：在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。")]),t._v(" "),e("p",[t._v("现代软件开发项目中，分工明确，基本上都会有研发、测试、QA 等角色。不同角色由于关注的视角不同，测试目标和测试方法也不完全相同。本文主要从研发、测试的视角去考量软件测试技术。")]),t._v(" "),e("p",[t._v("注意：")]),t._v(" "),e("ul",[e("li",[t._v("为了方便，只有测试人员需要关注的测试点用【测试】标注；")]),t._v(" "),e("li",[t._v("而只有研发人员需要关注的测试点用【研发】标注；")]),t._v(" "),e("li",[t._v("都需要关注的测试点则不作标注。")])])]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95%E5%88%86%E7%B1%BB"}},[t._v("测试方法分类")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"#%E4%BB%8E%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%E5%88%86%E7%B1%BB"}},[t._v("从测试设计方法分类")])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E4%BB%8E%E6%B5%8B%E8%AF%95%E7%9A%84%E7%9B%AE%E7%9A%84%E5%88%86%E7%B1%BB"}},[t._v("从测试的目的分类")])])])]),t._v(" "),e("li",[e("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"}},[t._v("参考资料")])])]),t._v(" "),e("h2",{attrs:{id:"测试方法分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试方法分类"}},[t._v("#")]),t._v(" 测试方法分类")]),t._v(" "),e("h3",{attrs:{id:"从测试设计方法分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从测试设计方法分类"}},[t._v("#")]),t._v(" 从测试设计方法分类")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("黑盒测试【测试】")]),t._v(" - 把软件系统当作一个“黑箱”，无法了解或使用系统的内部结构及知识。从软件的行为，而不是内部结构出发来设计测试。")]),t._v(" "),e("li",[e("strong",[t._v("白盒测试【研发】")]),t._v(" - 设计者可以看到软件系统的内部结构，并且使用软件的内部知识来指导测试数据及方法的选择。")]),t._v(" "),e("li",[e("strong",[t._v("灰盒测试")]),t._v(" - 介于黑盒和白盒之间。")])]),t._v(" "),e("blockquote",[e("p",[t._v("小结：")]),t._v(" "),e("ul",[e("li",[t._v("黑河测试通常针对的是软件的行为或功能，一般是测试人员主要关注的。")]),t._v(" "),e("li",[t._v("白盒测试通常则需要对软件有一定程度的了解，一般是开发人员所关注的。")]),t._v(" "),e("li",[t._v("灰盒测试通常是为了测试软件在特定的场景下的表现，而非主场景。")])])]),t._v(" "),e("h3",{attrs:{id:"从测试的目的分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从测试的目的分类"}},[t._v("#")]),t._v(" 从测试的目的分类")]),t._v(" "),e("h4",{attrs:{id:"功能测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#功能测试"}},[t._v("#")]),t._v(" 功能测试")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("单元测试（Unit Test）")]),t._v(" - 在最低粒度的功能/参数上验证程序的准确性，比如测试一个函数的正确性。【研发】\n"),e("ul",[e("li",[t._v("常用技术："),e("a",{attrs:{href:"https://github.com/junit-team/junit4",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("junit4")]),e("OutboundLink")],1),t._v("、"),e("a",{attrs:{href:"https://github.com/junit-team/junit5",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("junit5")]),e("OutboundLink")],1),t._v("、"),e("a",{attrs:{href:"https://github.com/mockito/mockito",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("mockito")]),e("OutboundLink")],1),t._v("、"),e("a",{attrs:{href:"https://github.com/joel-costigliola/assertj-core",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("assertj-core")]),e("OutboundLink")],1)])])]),t._v(" "),e("li",[e("strong",[t._v("功能测试（Functional Test）")]),t._v(" - 验证模块的功能。【测试】")]),t._v(" "),e("li",[e("strong",[t._v("集成测试（Integration Test）")]),t._v(" - 验证几个互相有依赖关系的模块的功能。【测试】")]),t._v(" "),e("li",[e("strong",[t._v("场景测试（Scenario Test）")]),t._v("- 验证几个模块是否能完成一个用户场景。【测试】")]),t._v(" "),e("li",[e("strong",[t._v("系统测试（System Test）")]),t._v(" - 对于整个系统功能的测试。【测试】")]),t._v(" "),e("li",[e("strong",[t._v("Alpha 测试")]),t._v(" - 软件测试人员在真实用户环境中对软件进行全面的测试。【测试】")]),t._v(" "),e("li",[e("strong",[t._v("Beta 测试")]),t._v(" - 也叫公测，是真实的用户在真实的环境中进行的测试。")])]),t._v(" "),e("h4",{attrs:{id:"非功能测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非功能测试"}},[t._v("#")]),t._v(" 非功能测试")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("压力测试（Stress test）")]),t._v(" - 验证软件在超过负载设计的情况下仍能返回正确的结果，没有崩溃")]),t._v(" "),e("li",[e("strong",[t._v("负载测试（Load test）")]),t._v(" - 测试软件在负载情况下能否正常工作")]),t._v(" "),e("li",[e("strong",[t._v("性能测试（Performance test）")]),t._v(" - 测试软件的效能，是否提供满意的服务质量。\n"),e("ul",[e("li",[t._v("常用技术："),e("a",{attrs:{href:"https://jmeter.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[e("strong",[t._v("JMeter")]),e("OutboundLink")],1),t._v("、JMH。")])])]),t._v(" "),e("li",[e("strong",[t._v("软件辅助功能测试（Accessibility test")]),t._v("） - 测试软件是否向残疾用户提供足够的辅助功能")]),t._v(" "),e("li",[e("strong",[t._v("本地化/全球化测试（Localization/Globalization")]),t._v("）")]),t._v(" "),e("li",[e("strong",[t._v("兼容性测试（Compatibility Test）")])]),t._v(" "),e("li",[e("strong",[t._v("配置测试（Configuration Test）")]),t._v(" - 测试软件在各种配置下能否正常工作")]),t._v(" "),e("li",[e("strong",[t._v("可用性测试（Usability Test）")]),t._v(" – 测试软件是否好用")]),t._v(" "),e("li",[e("strong",[t._v("安全性测试（Security Test）")])])]),t._v(" "),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.cnblogs.com/TankXiao/archive/2012/02/20/2347016.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("软件测试 (一) 软件测试方法大汇总"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.xncoding.com/2018/01/07/java/jmh.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 微基准测试框架 JMH"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=v.exports}}]);